#include<bits/stdc++.h>
using namespace std;


class heap{
    
    public:
    
    int arr[100];
    int size;
   
  //constructor 
  heap(){
      arr[0]=-1;
      size=0;
  }
  
  int index=0;
  
  //insert function
  
  //time complexity of inserting a node in a max heap or a min heap is O(logn)
  //because we just checking node and parent of that node
  //so same as calculatin height of a bst
  
  
  void insert(int val){
      size=size+1;
    int index=size;
    arr[index]=val;
    
  while(index>1){
      int parent=index/2;
      if(arr[index]>arr[parent]){
      swap(arr[index],arr[parent]);
      
      index=parent;
      }
      
      else return;
  }
      
  }
  
 
 //timecomplexity  O(log(n))
 
  void deletion(){
      
      if(size==0){
          cout<<"nothing to left for deleting"<<endl;
          return;
      }
    
    arr[1]=arr[size];
    size=size-1;
    
    int i=1;
   while((2*i+1)<=size && (arr[i]<arr[2*i] || arr[i]<arr[2*i+1])){
       if(arr[2*i]>arr[2*i+1])
           swap(arr[2*i],arr[i]);
       
       else 
          swap(arr[2*i+1],arr[i]);
          
    
    i++;
       
   } 
   
   return;
     
  }
  
  

  
 //print function 
  void print(){
      for(int i=1;i<=size;i++){
          cout<<arr[i]<<" ";
      }
  }
  
  
  
  
 //heapify algorithm
 //timecomplexity of this function is O(log n)
  
  
 void heapify(int arr[],int n,int i){
     
    int left=2*i;
    int right=2*i+1;
    int root=i;
    
    if(left<=n && arr[left]>arr[root]){
        root=left;
    }
    
    if(right<=n && arr[right]>arr[root]){
        root=right;
    }
    
    if(root!=i){
        swap(arr[root],arr[i]);
        
      //again recursive call for next l ans r
     
     heapify(arr,n,root);
    }
    
     
     return;
 } 
  
  
  
    
    
};





int main(){
    
   heap h;
    
   h.insert(10);
   h.insert(70);
   h.insert(20);
   h.insert(400);
   h.insert(15);
   h.insert(90);
  
 h.print();
 
   h.deletion();
   
 cout<<endl;   
 
  h.print();
  
  
 //heapify algorithm
 //arrange all elements in min heap or max heap order
 
//we know that from (n/2+1 to n) all of these are leap node so
//they are heap order
//now our task to rearrenge from (n/2 to 1)  in heap order

int arr[6]={-1,50,23,65,11,90};
int n=5;


//time complexity of this is O(n)
//means build a heap is taking O(N)

for(int i=n/2;i>0;i--){
    
  h.heapify(arr,n,i);  
}
  
  cout<<endl;
 
//print the rearranged array
cout<<"after heapify array is look like this :"<<endl;
        
for(int i=1;i<=n;i++){
   cout<<arr[i]<<" ";
}  
  
  
  
  
  
  
    return 0;
}


